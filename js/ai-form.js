// js/ai-form.js - KOMPLETT KORRIGIERTE VERSION mit intelligenter Booking-Erkennung

export const initAiForm = () => {
    console.log("üöÄ Initialisiere korrigierte AI-Form mit intelligenter Booking-Erkennung");

    const aiForm = document.getElementById('ai-form');
    if (!aiForm) {
        console.warn("‚ö†Ô∏è #ai-form nicht gefunden!");
        return;
    }

    // DOM-Elemente
    const aiQuestion = document.getElementById('ai-question');
    const aiStatus = document.getElementById('ai-status');
    const modalOverlay = document.getElementById('ai-response-modal');
    const responseArea = document.getElementById('ai-chat-history');
    const closeButtons = document.querySelectorAll('#close-ai-response-modal-top, #close-ai-response-modal-bottom');

    // Globale Variable f√ºr ausgew√§hlten R√ºckruf-Slot
    let selectedCallbackData = null;

    // ===================================================================
    // VERBESSERTE API-KOMMUNIKATION
    // ===================================================================

    const safeFetchAPI = async (url, options = {}) => {
        try {
            console.log(`üåê API-Anfrage an: ${url}`);
            console.log(`üì¶ Request Data:`, options.body);
            
            const response = await fetch(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            });
            
            console.log(`üìä Response Status: ${response.status} ${response.statusText}`);
            
            if (!response.ok) {
                let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
                
                try {
                    const errorText = await response.text();
                    console.error(`‚ùå Error Response:`, errorText);
                    
                    try {
                        const errorData = JSON.parse(errorText);
                        errorMessage = errorData.message || errorData.error || errorMessage;
                    } catch (jsonError) {
                        if (errorText && errorText.length < 200) {
                            errorMessage = errorText;
                        }
                    }
                } catch (textError) {
                    console.error(`‚ùå Fehler beim Lesen der Error-Response:`, textError);
                }
                
                throw new Error(errorMessage);
            }
            
            const responseText = await response.text();
            console.log(`üìù Raw Response (first 200 chars):`, responseText.substring(0, 200));
            
            if (!responseText || responseText.trim().length === 0) {
                throw new Error('Leere Antwort vom Server erhalten');
            }
            
            try {
                const jsonData = JSON.parse(responseText);
                console.log(`‚úÖ JSON erfolgreich geparst`);
                return jsonData;
            } catch (parseError) {
                console.error(`‚ùå JSON Parse Error:`, parseError);
                
                if (responseText.startsWith('<!DOCTYPE') || responseText.startsWith('<html')) {
                    throw new Error('Server-Fehler: HTML-Seite statt JSON erhalten');
                } else if (responseText.includes('Internal Server Error')) {
                    throw new Error('Interner Server-Fehler');
                } else if (responseText.includes('502') || responseText.includes('503')) {
                    throw new Error('Server tempor√§r nicht verf√ºgbar');
                } else {
                    throw new Error(`Ung√ºltige Server-Antwort: ${parseError.message}`);
                }
            }
            
        } catch (fetchError) {
            console.error(`‚ùå Fetch Error:`, fetchError);
            
            if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {
                throw new Error('Netzwerkfehler - bitte √ºberpr√ºfe deine Internetverbindung');
            }
            
            if (fetchError.name === 'AbortError') {
                throw new Error('Anfrage-Timeout - Server antwortet nicht');
            }
            
            throw fetchError;
        }
    };

    // ===================================================================
    // INTELLIGENTE BOOKING-ERKENNUNG - VOLLST√ÑNDIG KORRIGIERT
    // ===================================================================

const isLocalBookingRequest = (userInput) => {
    const lowerInput = userInput.toLowerCase();
    
    // SCHRITT 1: Pr√ºfe zuerst explizite Info-Anfragen √ºber Michael (haben absolute Vorrang)
    const infoAboutMichaelPhrases = [
        'wer ist michael',
        'was macht michael',
        '√ºber michael', 
        'michael kanda',
        'michael arbeitet',
        'michaels erfahrung',
        'qualifikation michael',
        'michael bei maxonline',
        'erz√§hl mir √ºber michael',
        'informationen √ºber michael',
        'was kann michael',
        'michael f√§higkeiten',
        'michael background',
        'michael hintergrund',
        'michael freizeit',           // NEU
        'freizeit michael',           // NEU
        'hobby michael',              // NEU
        'michael hobbys',             // NEU
        'michael privat',             // NEU
        'was macht michael privat',   // NEU
        'michael in seiner freizeit', // NEU
        'michael sport',              // NEU
        'michael musik',              // NEU
        'michael hund',               // NEU
        'michael evita'               // NEU
    ];
    
    // WICHTIG: Info-Anfragen haben absolute Vorrang - sofort return false
    if (infoAboutMichaelPhrases.some(phrase => lowerInput.includes(phrase))) {
        console.log("üîç Info-Anfrage √ºber Michael erkannt - KEIN Booking");
        return false; // Definitiv KEINE Booking-Anfrage
    }
    
    // SCHRITT 2: Pr√ºfe Kontext-spezifische Booking-Phrasen (nur explizite Terminw√ºnsche)
    const contextBookingPhrases = [
        'termin mit michael',
        'michael anrufen', 
        'r√ºckruf von michael',
        'gespr√§ch mit michael',
        'michael erreichen',
        'michael kontaktieren',
        'wann hat michael zeit',
        'michael verf√ºgbar',
        'kann michael mich anrufen',
        'kann michael anrufen',
        'm√∂chte michael sprechen',
        'michael telefonieren',
        'ruf mich michael',
        'michael r√ºckruf'
    ];
    
    if (contextBookingPhrases.some(phrase => lowerInput.includes(phrase))) {
        console.log("üîç Kontext-Booking mit Michael erkannt - Booking JA");
        return true; // Definitiv Booking-Anfrage
    }
    
    // SCHRITT 3: Pr√ºfe allgemeine Basis-Keywords (ohne Michael-Bezug)
    const basicBookingKeywords = [
        'termin buchen',
        'r√ºckruf buchen', 
        'callback',
        'appointment',
        'buchung',
        'terminvereinbarung',
        'verf√ºgbare termine',
        'freie termine'
    ];
    
    const hasBasicBookingKeyword = basicBookingKeywords.some(keyword => lowerInput.includes(keyword));
    
    if (hasBasicBookingKeyword) {
        console.log("üîç Basis-Booking-Keyword erkannt - Booking JA");
        return true;
    }
    
    // SCHRITT 4: Pr√ºfe einzelne Begriffe nur in sehr spezifischem Kontext
    const potentialBookingWords = ['termin', 'r√ºckruf', 'anrufen', 'telefon', 'kontakt'];
    const hasBookingWord = potentialBookingWords.some(word => lowerInput.includes(word));
    
    // Nur als Booking werten, wenn KEIN "michael" UND KEIN Fragenwort vorhanden
    const hasQuestionWords = ['was', 'wie', 'wer', 'wo', 'wann', 'warum', 'welche', 'erz√§hl', 'erkl√§re'].some(q => lowerInput.includes(q));
    const hasMichael = lowerInput.includes('michael');
    
    if (hasBookingWord && !hasQuestionWords && !hasMichael) {
        console.log("üîç Isoliertes Booking-Keyword ohne Frage - Booking JA");
        return true;
    }
    
    console.log("üîç Keine Booking-Keywords erkannt");
    return false;
};
    

    // ===================================================================
    // KORRIGIERTE EVITA-KOMMUNIKATION
    // ===================================================================

    // KORRIGIERTE L√ñSUNG in js/ai-form.js
// Ersetze die sendToEvita Funktion ab Zeile ca. 145

const sendToEvita = async (userInput, isFromChat = false) => {
    console.log(`üåê Sende an Evita: "${userInput}" (fromChat: ${isFromChat})`);
    
    // VEREINFACHTE Booking-Keyword-Erkennung (weniger aggressiv)
    const potentialBookingKeywords = [
        'termin', 'r√ºckruf', 'buchung', 'buchen', 
        'anrufen', 'telefonieren', 'kalender', 
        'verf√ºgbar', 'sprechen', 'gespr√§ch',
        'callback', 'appointment', 'kontakt'
    ];
    
    const lowerInput = userInput.toLowerCase();
    const hasPotentialBookingKeyword = potentialBookingKeywords.some(keyword => lowerInput.includes(keyword));
    
    console.log(`üîç Potentielle Booking-Keywords gefunden: ${hasPotentialBookingKeyword}`);
    
    // Bei potentiellen Booking-Keywords: Sende an Evita mit speziellem Hinweis
    if (hasPotentialBookingKeyword) {
        console.log("üéØ Potentielle Booking-Anfrage ‚Üí Sende an Evita zur Kl√§rung");
        
        try {
            const data = await safeFetchAPI('/api/ask-gemini', {
                method: 'POST',
                body: JSON.stringify({ 
                    prompt: `${userInput}

WICHTIGER HINWEIS F√úR EVITA: 
Der Nutzer hat m√∂glicherweise eine Terminanfrage gestellt. Analysiere die Nachricht:

1. Falls es eine ECHTE Terminanfrage ist (z.B. "Ich m√∂chte einen Termin", "Kann Michael mich anrufen?"):
   - Antworte freundlich und frage explizit nach: "M√∂chtest du, dass ich Michaels Kalender √∂ffne und dir verf√ºgbare R√ºckruf-Termine zeige?"
   - BEENDE deine Antwort mit: [BOOKING_CONFIRM_REQUEST]

2. Falls es KEINE Terminanfrage ist (z.B. "Was macht Michael in seiner Freizeit?", "Wie funktioniert Termin-Management?"):
   - Beantworte die Frage ganz normal ohne Terminbezug
   - VERWENDE NICHT: [BOOKING_CONFIRM_REQUEST]

Analysiere genau und entscheide weise!`, 
                    source: 'evita' 
                }),
            });

            console.log(`üì® Evita Response:`, data);

            const message = data.answer || "Ich konnte keine Antwort finden.";
            
            // Pr√ºfe, ob Evita eine Booking-Best√§tigung anfordert
            if (message.includes('[BOOKING_CONFIRM_REQUEST]')) {
                console.log("üéØ Evita fordert Booking-Best√§tigung an");
                
                const cleanMessage = message.replace('[BOOKING_CONFIRM_REQUEST]', '').trim();
                
                if (!isFromChat) {
                    initializeChat(cleanMessage);
                    showChatModal();
                    
                    // F√ºge Best√§tigungs-Buttons hinzu
                    setTimeout(() => {
                        addBookingConfirmationButtons();
                    }, 500);
                } else {
                    addMessageToHistory(cleanMessage, 'ai');
                    
                    // F√ºge Best√§tigungs-Buttons hinzu
                    setTimeout(() => {
                        addBookingConfirmationButtons();
                    }, 200);
                }
            } else {
                // Normale Antwort ohne Booking-Bezug
                if (!isFromChat) {
                    initializeChat(message);
                    showChatModal();
                } else {
                    addMessageToHistory(message, 'ai');
                }
            }
            
        } catch (error) {
            console.error(`‚ùå Evita-Fehler:`, error);
            handleEvitaError(error, isFromChat);
        }
        
        return; // Beende hier
    }

    // Normale API-Anfrage f√ºr alle anderen Fragen (ohne Booking-Keywords)
    try {
        const data = await safeFetchAPI('/api/ask-gemini', {
            method: 'POST',
            body: JSON.stringify({ prompt: userInput }),
        });

        console.log(`üì® Evita Response:`, data);

        if (data.action === 'launch_booking_modal') {
            console.log("üéØ Direkte Booking-Aktion von API erkannt");
            
            const message = data.answer || "Einen Moment, ich √∂ffne Michaels Kalender f√ºr dich...";
            
            if (!isFromChat) {
                initializeChat(message);
                showChatModal();
                
                setTimeout(() => {
                    console.log("‚è∞ Starte R√ºckruf-Modal nach Chat-Antwort");
                    launchBookingModal();
                }, 1500);
            } else {
                addMessageToHistory(message, 'ai');
                
                setTimeout(() => {
                    console.log("‚è∞ Starte R√ºckruf-Modal aus Chat");
                    launchBookingModal();
                }, 800);
            }
            
        } else {
            const message = data.answer || "Ich konnte keine Antwort finden.";
            
            if (!isFromChat) {
                initializeChat(message);
                showChatModal();
            } else {
                addMessageToHistory(message, 'ai');
            }
        }
        
    } catch (error) {
        console.error(`‚ùå Evita-Fehler:`, error);
        handleEvitaError(error, isFromChat);
    }
};

// NEUE FUNKTION: Booking-Best√§tigungs-Buttons hinzuf√ºgen
const addBookingConfirmationButtons = () => {
    console.log("üîò F√ºge Booking-Best√§tigungs-Buttons hinzu");
    
    const chatHistory = document.getElementById('ai-chat-history');
    if (!chatHistory) return;
    
    // Pr√ºfe, ob bereits Buttons vorhanden sind
    if (chatHistory.querySelector('.booking-confirmation-buttons')) {
        console.log("‚ö†Ô∏è Best√§tigungs-Buttons bereits vorhanden");
        return;
    }
    
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'booking-confirmation-buttons chat-message ai';
    buttonsContainer.style.cssText = `
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 15px;
        padding: 15px;
        background-color: rgba(255, 193, 7, 0.1);
        border-radius: 12px;
        border: 1px solid #ffc107;
    `;
    
    // JA-Button
    const yesButton = document.createElement('button');
    yesButton.textContent = 'üìÖ Ja, Kalender √∂ffnen';
    yesButton.style.cssText = `
        background: #28a745;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        flex: 1;
        min-width: 140px;
    `;
    yesButton.addEventListener('mouseenter', () => {
        yesButton.style.background = '#218838';
        yesButton.style.transform = 'translateY(-1px)';
    });
    yesButton.addEventListener('mouseleave', () => {
        yesButton.style.background = '#28a745';
        yesButton.style.transform = 'translateY(0)';
    });
    yesButton.addEventListener('click', () => {
        console.log("‚úÖ Benutzer best√§tigt Booking-Wunsch");
        
        // Entferne Buttons
        buttonsContainer.remove();
        
        // F√ºge Best√§tigungs-Nachricht hinzu
        addMessageToHistory("Perfekt! Ich √∂ffne jetzt Michaels Kalender f√ºr dich.", 'ai');
        
        // Starte Booking-Modal nach kurzer Verz√∂gerung
        setTimeout(() => {
            launchBookingModal();
        }, 800);
    });
    
    // NEIN-Button
    const noButton = document.createElement('button');
    noButton.textContent = '‚ùå Nein, danke';
    noButton.style.cssText = `
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        flex: 1;
        min-width: 140px;
    `;
    noButton.addEventListener('mouseenter', () => {
        noButton.style.background = '#5a6268';
        noButton.style.transform = 'translateY(-1px)';
    });
    noButton.addEventListener('mouseleave', () => {
        noButton.style.background = '#6c757d';
        noButton.style.transform = 'translateY(0)';
    });
    noButton.addEventListener('click', () => {
        console.log("‚ùå Benutzer lehnt Booking ab");
        
        // Entferne Buttons
        buttonsContainer.remove();
        
        // F√ºge Ablehnungs-Nachricht hinzu
        addMessageToHistory("Alles klar! Falls du doch noch einen Termin brauchst, frag einfach nach. Kann ich dir sonst noch helfen?", 'ai');
    });
    
    buttonsContainer.appendChild(yesButton);
    buttonsContainer.appendChild(noButton);
    
    chatHistory.appendChild(buttonsContainer);
    chatHistory.scrollTop = chatHistory.scrollHeight;
    
    console.log("‚úÖ Booking-Best√§tigungs-Buttons hinzugef√ºgt");
};

// NEUE FUNKTION: Einheitliche Fehlerbehandlung
const handleEvitaError = (error, isFromChat) => {
    let errorMessage = "Entschuldigung, ich habe gerade technische Schwierigkeiten.";
    
    if (error.message.includes('Netzwerkfehler')) {
        errorMessage = "üåê Verbindungsproblem erkannt. Bitte √ºberpr√ºfe deine Internetverbindung und versuche es erneut.";
    } else if (error.message.includes('Server-Fehler') || error.message.includes('HTML-Seite')) {
        errorMessage = "üîß Server-Problem erkannt. Bitte versuche es in ein paar Minuten noch einmal.";
    } else if (error.message.includes('Timeout')) {
        errorMessage = "‚è±Ô∏è Der Server antwortet nicht. Bitte versuche es sp√§ter noch einmal.";
    } else if (error.message.includes('502') || error.message.includes('503')) {
        errorMessage = "üöß Server wird gerade gewartet. Bitte versuche es in ein paar Minuten erneut.";
    }
    
    errorMessage += "\n\nF√ºr dringende Anfragen: michael@designare.at";
    
    if (isFromChat) {
        addMessageToHistory(errorMessage, 'ai');
    } else {
        initializeChat(errorMessage);
        showChatModal();
    }
};

    // ===================================================================
    // KORRIGIERTES BOOKING-MODAL
    // ===================================================================

    const launchBookingModal = async () => {
        console.log("üöÄ Starte korrigiertes R√ºckruf-Modal");
        
        try {
            // Schlie√üe Chat-Modal
            hideChatModal();
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // Entferne existierendes Modal
            const existingModal = document.getElementById('booking-modal');
            if (existingModal) {
                existingModal.remove();
                console.log("üóëÔ∏è Existierendes Modal entfernt");
            }
            
            // Verwende Inline-HTML
            const modalHTML = createInlineModalHTML();
            
            // F√ºge Modal zum DOM hinzu
            const modalContainer = document.getElementById('modal-container') || document.body;
            modalContainer.insertAdjacentHTML('beforeend', modalHTML);
            
            // Stelle sicher, dass das Modal sichtbar ist
            const callbackModal = document.getElementById('booking-modal');
            if (callbackModal) {
                // Forciere Sichtbarkeit
                callbackModal.style.cssText = `
                    position: fixed !important;
                    top: 0 !important;
                    left: 0 !important;
                    width: 100% !important;
                    height: 100% !important;
                    background: rgba(0, 0, 0, 0.85) !important;
                    display: flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    z-index: 999999 !important;
                    opacity: 1 !important;
                    visibility: visible !important;
                `;
                
                // Verhindere Body-Scrollen
                document.body.style.overflow = 'hidden';
                document.body.classList.add('no-scroll');
                
                // Setup Event Listeners f√ºr das Booking Modal
                setupBookingModalEventListeners();
                
                // Lade verf√ºgbare R√ºckruf-Termine
                setTimeout(() => {
                    loadCallbackSlots();
                }, 500);
                
                console.log("‚úÖ Korrigiertes R√ºckruf-Modal erfolgreich gestartet");
                return true;
            } else {
                throw new Error("Modal konnte nicht im DOM erstellt werden");
            }
            
        } catch (error) {
            console.error("‚ùå R√ºckruf-Modal fehlgeschlagen:", error);
            createEmergencyFallbackModal();
            return false;
        }
    };

    // ===================================================================
    // INLINE-HTML FUNKTION
    // ===================================================================

    const createInlineModalHTML = () => {
        return `
            <div id="booking-modal" class="callback-modal">
                <div class="booking-modal-content">
                    <div class="booking-modal-header">
                        <h2 class="booking-modal-title">R√ºckruf-Termin buchen</h2>
                        <p class="booking-modal-subtitle">Michael ruft dich zum gew√ºnschten Zeitpunkt an</p>
                    </div>
                    
                    <div class="booking-modal-body">
                        <div id="step-slot-selection" class="booking-step active">
                            <h3 class="booking-step-title">W√§hle deinen R√ºckruf-Termin:</h3>
                            
                            <div id="callback-loading">
                                <div>
                                    Lade verf√ºgbare R√ºckruf-Termine...
                                </div>
                            </div>
                            
                            <div id="callback-slots-container">
                                </div>
                            
                            <div id="no-slots-message">
                                </div>
                        </div>
                        
                        <div id="step-contact-details" class="booking-step">
                            <h3 class="booking-step-title">Deine Kontaktdaten:</h3>
                            <div id="selected-slot-display">
                                Ausgew√§hlter R√ºckruf-Termin wird hier angezeigt
                            </div>
                            
                            <form id="callback-form">
                                <div class="booking-form-group">
                                    <label for="callback-name">Dein Name *</label>
                                    <input type="text" id="callback-name" required>
                                </div>
                                
                                <div class="booking-form-group">
                                    <label for="callback-phone">Deine Telefonnummer *</label>
                                    <input type="tel" id="callback-phone" required placeholder="z.B. 0664 123 45 67">
                                </div>
                                
                                <div class="booking-form-group">
                                    <label for="callback-topic">Dein Anliegen (optional)</label>
                                    <textarea id="callback-topic" rows="3" placeholder="Kurze Beschreibung deines Anliegens..."></textarea>
                                </div>
                                
                                <div class="booking-form-actions">
                                    <button type="button" id="back-to-slots" class="booking-btn back-btn">‚Üê Zur√ºck</button>
                                    <button type="submit" id="submit-callback" class="booking-btn submit-btn">R√ºckruf buchen</button>
                                </div>
                            </form>
                        </div>
                        
                        <div id="step-confirmation" class="booking-step">
                            <div class="confirmation-content">
                                <h3 class="confirmation-title">R√ºckruf-Termin erfolgreich gebucht!</h3>
                                <div id="confirmation-details">
                                    </div>
                                <p class="confirmation-subtext"><strong>Michael wird dich zum vereinbarten Zeitpunkt anrufen.</strong><br>
                                    Halte bitte dein Telefon 5 Minuten vor dem Termin bereit.
                                </p>
                                <button onclick="closeCallbackModal()" class="booking-btn confirm-close-btn">Perfekt!</button>
                            </div>
                        </div>
                    </div>
                    
                    <button onclick="closeCallbackModal()" class="booking-modal-close-btn" aria-label="Schlie√üen">√ó</button>
                </div>
            </div>
        `;
    };

    // ===================================================================
    // EMERGENCY FALLBACK MODAL
    // ===================================================================

    const createEmergencyFallbackModal = () => {
        console.log("üÜò Erstelle Emergency-Fallback-Modal...");
        
        const emergencyModal = document.createElement('div');
        emergencyModal.id = 'booking-modal';
        
        emergencyModal.innerHTML = `
            <div class="booking-modal-content fallback-modal-content">
                <div class="fallback-modal-header">
                    <div class="fallback-icon">‚ö†Ô∏è</div>
                    <h2 class="fallback-title">Technisches Problem</h2>
                </div>
                
                <div class="fallback-modal-body">
                    <p>
                        Das automatische Buchungssystem ist momentan nicht verf√ºgbar.<br>
                        <strong>Kontaktiere Michael direkt f√ºr deinen R√ºckruf-Termin:</strong>
                    </p>
                    
                    <div>
                        <a href="mailto:michael@designare.at?subject=R√ºckruf-Termin Anfrage&body=Hallo Michael,%0D%0A%0D%0AIch m√∂chte gerne einen R√ºckruf-Termin vereinbaren.%0D%0A%0D%0AMeine Telefonnummer: %0D%0AMein Anliegen: %0D%0A%0D%0AVielen Dank!" 
                           class="fallback-email-link">
                            üìß E-Mail f√ºr R√ºckruf-Termin senden
                        </a>
                    </div>
                    
                    <button onclick="closeCallbackModal()" class="booking-btn fallback-close-btn">
                        Schlie√üen
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(emergencyModal);
        document.body.style.overflow = 'hidden';
        
        console.log("‚úÖ Emergency-Fallback-Modal erstellt");
        return emergencyModal;
    };

    // ===================================================================
    // EVENT LISTENERS F√úR BOOKING MODAL
    // ===================================================================

    const setupBookingModalEventListeners = () => {
        console.log("üîß Setze Booking-Modal Event Listeners auf...");
        
        // Callback Form Submit
        const callbackForm = document.getElementById('callback-form');
        if (callbackForm) {
            callbackForm.addEventListener('submit', submitCallback);
        }
        
        // Zur√ºck Button
        const backButton = document.getElementById('back-to-slots');
        if (backButton) {
            backButton.addEventListener('click', () => {
                showCallbackStep('step-slot-selection');
                selectedCallbackData = null;
                
                // Reset Slot-Buttons
                document.querySelectorAll('.callback-slot-button').forEach(btn => {
                    btn.style.opacity = '1';
                    btn.style.borderColor = '#e9ecef';
                    btn.style.backgroundColor = 'white';
                    btn.disabled = false;
                    btn.classList.remove('selected');
                });
            });
        }
    };

    // ===================================================================
    // R√úCKRUF-SLOT-LOADING
    // ===================================================================

    const loadCallbackSlots = async () => {
        console.log("Lade R√ºckruf-Slots...");
        
        const loadingDiv = document.getElementById('callback-loading');
        const slotsContainer = document.getElementById('callback-slots-container');
        const noSlotsMessage = document.getElementById('no-slots-message');
        
        try {
            const data = await safeFetchAPI('/api/suggest-appointments');
            
            if (loadingDiv) loadingDiv.style.display = 'none';
            
            if (data.success && data.suggestions && data.suggestions.length > 0) {
                console.log("‚úÖ R√ºckruf-Slots erfolgreich geladen:", data.suggestions.length);
                
                if (slotsContainer) {
                    slotsContainer.innerHTML = '';
                    
                    data.suggestions.forEach((suggestion, index) => {
                        const slotButton = document.createElement('button');
                        slotButton.className = 'callback-slot-button';
                        slotButton.dataset.slot = suggestion.slot;
                        slotButton.dataset.datetime = suggestion.fullDateTime;
                        slotButton.dataset.formatted = suggestion.formattedString;
                        
                        const icon = suggestion.isPreferredTime ? '‚≠ê' : 'üìû';
                        
                        slotButton.innerHTML = `
                            <div style="display: flex; align-items: center; gap: 12px;">
                                <span style="font-size: 1.2rem;">${icon}</span>
                                <div style="flex: 1; text-align: left;">
                                    <div style="font-weight: bold; color: #1a1a1a; margin-bottom: 4px;">
                                        R√ºckruf-Termin ${suggestion.slot}
                                    </div>
                                    <div style="color: #666; font-size: 0.9rem;">
                                        ${suggestion.formattedString}
                                    </div>
                                </div>
                                <span style="color: #ffc107; font-size: 1.1rem;">‚Üí</span>
                            </div>
                        `;
                        
                        slotButton.style.cssText = `
                            width: 100%;
                            padding: 15px;
                            border: 2px solid #e9ecef;
                            border-radius: 8px;
                            background: white;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            text-align: left;
                            margin-bottom: 10px;
                        `;
                        
                        slotButton.addEventListener('mouseenter', () => {
                            slotButton.style.borderColor = '#ffc107';
                            slotButton.style.backgroundColor = '#fff9e6';
                            slotButton.style.transform = 'translateY(-1px)';
                        });
                        
                        slotButton.addEventListener('mouseleave', () => {
                            if (!slotButton.classList.contains('selected')) {
                                slotButton.style.borderColor = '#e9ecef';
                                slotButton.style.backgroundColor = 'white';
                                slotButton.style.transform = 'translateY(0)';
                            }
                        });
                        
                        slotButton.addEventListener('click', () => selectCallbackSlot(suggestion));
                        
                        if (slotsContainer) {
                            slotsContainer.appendChild(slotButton);
                        }
                    });
                }
                
            } else {
                console.warn("‚ö†Ô∏è Keine R√ºckruf-Slots verf√ºgbar");
                if (noSlotsMessage) {
                    noSlotsMessage.style.display = 'block';
                    noSlotsMessage.innerHTML = `
                        <div style="font-size: 2rem; margin-bottom: 10px;">üòî</div>
                        <p>Aktuell sind keine R√ºckruf-Termine verf√ºgbar.</p>
                        <p style="font-size: 0.9rem;">Kontaktiere Michael direkt f√ºr einen Termin:</p>
                        <a href="mailto:michael@designare.at?subject=R√ºckruf-Anfrage&body=Hallo Michael,%0D%0A%0D%0AIch h√§tte gerne einen R√ºckruf-Termin.%0D%0A%0D%0AMeine Telefonnummer: %0D%0AMein Anliegen: %0D%0A%0D%0AVielen Dank!" 
                           style="color: #ffc107; text-decoration: none; font-weight: bold;">
                            üìß michael@designare.at
                        </a>
                    `;
                }
            }
            
        } catch (error) {
            console.error("‚ùå Fehler beim Laden der R√ºckruf-Slots:", error);
            
            if (loadingDiv) loadingDiv.style.display = 'none';
            if (noSlotsMessage) {
                noSlotsMessage.style.display = 'block';
                
                let errorMsg = "Fehler beim Laden der Termine.";
                if (error.message.includes('Netzwerkfehler')) {
                    errorMsg = "Verbindungsproblem beim Laden der Termine.";
                } else if (error.message.includes('Server-Fehler')) {
                    errorMsg = "Server-Problem beim Laden der Termine.";
                }
                
                noSlotsMessage.innerHTML = `
                    <div style="font-size: 2rem; margin-bottom: 10px;">‚ö†Ô∏è</div>
                    <p>${errorMsg}</p>
                    <p style="font-size: 0.9rem;">Kontaktiere Michael direkt f√ºr einen Termin:</p>
                    <a href="mailto:michael@designare.at?subject=R√ºckruf-Anfrage (Fehler beim Laden)&body=Hallo Michael,%0D%0A%0D%0ADas automatische Buchungssystem hatte einen Fehler. Ich h√§tte gerne einen R√ºckruf-Termin.%0D%0A%0D%0AMeine Telefonnummer: %0D%0AMein Anliegen: %0D%0A%0D%0AVielen Dank!" 
                       style="color: #ffc107; text-decoration: none; font-weight: bold;">
                        üìß michael@designare.at
                    </a>
                `;
            }
        }
    };

    // ===================================================================
    // SLOT AUSW√ÑHLEN
    // ===================================================================

    const selectCallbackSlot = (suggestion) => {
        console.log("üìû R√ºckruf-Slot ausgew√§hlt:", suggestion);
        
        selectedCallbackData = suggestion;
        
        // Alle Buttons deaktivieren und ausgrauen
        document.querySelectorAll('.callback-slot-button').forEach(btn => {
            btn.style.opacity = '0.6';
            btn.style.borderColor = '#e9ecef';
            btn.style.backgroundColor = '#f8f9fa';
            btn.disabled = true;
            btn.classList.remove('selected');
        });
        
        // Ausgew√§hlten Button hervorheben
        const selectedButton = document.querySelector(`[data-slot="${suggestion.slot}"]`);
        if (selectedButton) {
            selectedButton.style.opacity = '1';
            selectedButton.style.borderColor = '#28a745';
            selectedButton.style.backgroundColor = '#e8f5e8';
            selectedButton.classList.add('selected');
        }
        
        // Update Display
        const selectedDisplay = document.getElementById('selected-slot-display');
        if (selectedDisplay) {
            selectedDisplay.innerHTML = `
                <strong>üìû Ausgew√§hlter R√ºckruf-Termin:</strong><br>
                <span style="color: #28a745; font-weight: bold;">${suggestion.formattedString}</span>
            `;
        }
        
        // Wechsle zu Kontaktdaten nach kurzer Verz√∂gerung
        setTimeout(() => {
            showCallbackStep('step-contact-details');
        }, 800);
    };

    // ===================================================================
    // R√úCKRUF-BUCHUNG
    // ===================================================================

    const submitCallback = async (event) => {
        event.preventDefault();
        console.log("üìû R√ºckruf-Buchung gestartet");
        
        const nameInput = document.getElementById('callback-name');
        const phoneInput = document.getElementById('callback-phone');
        const topicInput = document.getElementById('callback-topic');
        const submitButton = document.getElementById('submit-callback');
        
        if (!nameInput || !phoneInput || !selectedCallbackData) {
            showCallbackError('Bitte f√ºlle alle Pflichtfelder aus');
            return;
        }
        
        const name = nameInput.value.trim();
        const phone = phoneInput.value.trim();
        const topic = topicInput ? topicInput.value.trim() : '';
        
        if (!name || !phone) {
            showCallbackError('Name und Telefonnummer sind erforderlich');
            return;
        }
        
        // Telefonnummer-Validierung
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{7,20}$/;
        if (!phoneRegex.test(phone)) {
            showCallbackError('Bitte gib eine g√ºltige Telefonnummer ein');
            return;
        }
        
        // Button deaktivieren w√§hrend Buchung
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = 'Wird gebucht...';
        }
        
        try {
            const data = await safeFetchAPI('/api/book-appointment-phone', {
                method: 'POST',
                body: JSON.stringify({
                    slot: selectedCallbackData.fullDateTime,
                    name: name,
                    phone: phone,
                    topic: topic
                })
            });
            
            console.log("üìä R√ºckruf-Buchung Response:", data);
            
            if (data.success) {
                console.log("‚úÖ R√ºckruf erfolgreich gebucht");
                
                // Zeige Best√§tigung
                const confirmationDetails = document.getElementById('confirmation-details');
                if (confirmationDetails) {
                    confirmationDetails.innerHTML = `
                        <div style="margin-bottom: 12px;">
                            <strong>R√ºckruf-Termin:</strong><br>
                            <span style="color: #28a745;">${selectedCallbackData.formattedString}</span>
                        </div>
                        <div style="margin-bottom: 12px;">
                            <strong>Name:</strong> ${name}
                        </div>
                        <div style="margin-bottom: 12px;">
                            <strong>Telefonnummer:</strong> ${phone}
                        </div>
                        ${topic ? `
                        <div style="margin-bottom: 12px;">
                            <strong>Anliegen:</strong> ${topic}
                        </div>
                        ` : ''}
                        <div style="background: #e7f3ff; padding: 10px; border-radius: 5px; margin-top: 15px; font-size: 0.9rem;">
                            üìã <strong>Termin wurde erfolgreich in Michaels Kalender eingetragen</strong>
                        </div>
                    `;
                }
                
                showCallbackStep('step-confirmation');
                
            } else {
                throw new Error(data.message || 'Unbekannter Fehler bei der R√ºckruf-Buchung');
            }
            
        } catch (error) {
            console.error("‚ùå R√ºckruf-Buchung fehlgeschlagen:", error);
            
            let userMessage = error.message;
            
            if (error.message.includes('HTTP 409') || error.message.includes('conflict') || error.message.includes('bereits vergeben')) {
                userMessage = 'Dieser R√ºckruf-Termin ist leider bereits vergeben. Bitte w√§hle einen anderen Zeitslot.';
            } else if (error.message.includes('HTTP 500') || error.message.includes('Server-Fehler')) {
                userMessage = 'Server-Problem. Bitte versuche es sp√§ter noch einmal oder kontaktiere Michael direkt.';
            } else if (error.message.includes('Netzwerkfehler')) {
                userMessage = 'Verbindungsproblem. Bitte √ºberpr√ºfe deine Internetverbindung und versuche es erneut.';
            }
            
            showCallbackError(userMessage);
            
        } finally {
            // Button wieder aktivieren
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.textContent = 'R√ºckruf buchen';
            }
        }
    };

    // ===================================================================
    // HILFSFUNKTIONEN
    // ===================================================================

    const showCallbackStep = (stepId) => {
        // 1. Finde alle Schritte mit der NEUEN Klasse ".booking-step" und entferne die "active" Klasse
        document.querySelectorAll('.booking-step').forEach(step => {
            step.classList.remove('active');
        });
        
        // 2. Finde den Ziel-Schritt und f√ºge ihm die "active" Klasse hinzu
        const targetStep = document.getElementById(stepId);
        if (targetStep) {
            targetStep.classList.add('active');
            console.log("‚úÖ Wechsel zu Callback-Schritt:", stepId);
        }
    };

    const showCallbackError = (message) => {
        console.error("‚ùå Callback-Fehler:", message);
        
        let errorElement = document.getElementById('callback-error-message');
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.id = 'callback-error-message';
            errorElement.style.cssText = `
                background: #ff4757;
                color: white;
                padding: 12px;
                border-radius: 6px;
                margin: 15px 0;
                display: none;
                font-size: 0.9rem;
                line-height: 1.4;
            `;
            
            const form = document.getElementById('callback-form');
            if (form) {
                form.parentNode.insertBefore(errorElement, form);
            }
        }
        
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        
        // Auto-hide nach 8 Sekunden
        setTimeout(() => {
            errorElement.style.display = 'none';
        }, 8000);
        
        // Scroll zu Fehler
        errorElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    };

    const showChatModal = () => {
        if (modalOverlay) {
            modalOverlay.classList.add('visible');
            document.body.classList.add('no-scroll');
            console.log("‚úÖ Chat-Modal ge√∂ffnet");
        }
    };

    const hideChatModal = () => {
        if (modalOverlay) {
            modalOverlay.classList.remove('visible');
            document.body.classList.remove('no-scroll');
            console.log("‚úÖ Chat-Modal geschlossen");
        }
    };

    const addMessageToHistory = (message, sender) => {
        if (!responseArea) {
            console.warn("‚ö†Ô∏è Response Area nicht gefunden");
            return;
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${sender}`;
        messageDiv.textContent = message;
        
        responseArea.appendChild(messageDiv);
        responseArea.scrollTop = responseArea.scrollHeight;
        
        console.log(`üìù Nachricht hinzugef√ºgt (${sender})`);
    };

    const initializeChat = (initialMessage) => {
        if (!responseArea) {
            console.warn("‚ö†Ô∏è Response Area nicht gefunden f√ºr Chat-Initialisierung");
            return;
        }
        
        // Clear existing messages
        responseArea.innerHTML = '';
        
        // Check if chat form exists
        const existingChatForm = document.getElementById('ai-chat-form');
        if (!existingChatForm) {
            const chatForm = document.createElement('form');
            chatForm.id = 'ai-chat-form';
            chatForm.style.cssText = 'margin-top: 20px; display: flex; gap: 10px;';
            
            const chatInput = document.createElement('input');
            chatInput.type = 'text';
            chatInput.id = 'ai-chat-input';
            chatInput.placeholder = 'Deine Antwort...';
            chatInput.style.cssText = 'flex: 1; padding: 10px; border-radius: 5px; border: 1px solid #ccc; background: rgba(255,255,255,0.1); color: #fff;';
            
            const chatButton = document.createElement('button');
            chatButton.type = 'submit';
            chatButton.textContent = 'Senden';
            chatButton.style.cssText = 'padding: 10px 15px; background: #ffc107; border: none; border-radius: 5px; cursor: pointer; color: #1a1a1a; font-weight: bold;';
            
            chatForm.appendChild(chatInput);
            chatForm.appendChild(chatButton);
            
            const contentArea = document.getElementById('ai-response-content-area');
            if (contentArea) {
                contentArea.appendChild(chatForm);
            }
            
            console.log("‚úÖ Chat-Form erstellt");
        }
        
        // Add initial message
        addMessageToHistory(initialMessage, 'ai');
    };

    // ===================================================================
    // EVENT-LISTENER SETUP
    // ===================================================================

    // Hauptformular (Index-Seite)
    aiForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const question = aiQuestion.value.trim();
        if (!question) return;
        
        console.log("üìù Haupt-Form submitted:", question);
        
        aiStatus.style.display = 'block';
        aiStatus.textContent = 'Evita denkt nach...';
        aiForm.querySelector('button').disabled = true;
        
        try {
            await sendToEvita(question, false);
        } finally {
            aiQuestion.value = '';
            aiStatus.style.display = 'none';
            aiForm.querySelector('button').disabled = false;
        }
    });

    // Chat-Formular (Modal) - Event-Delegation
    document.addEventListener('submit', (e) => {
        if (e.target.id === 'ai-chat-form') {
            e.preventDefault();
            const chatInput = document.getElementById('ai-chat-input');
            if (!chatInput) return;
            
            const userInput = chatInput.value.trim();
            if (!userInput) return;
            
            console.log("üí¨ Chat-Form submitted:", userInput);
            
            addMessageToHistory(userInput, 'user');
            chatInput.value = '';
            sendToEvita(userInput, true);
        }
        
        if (e.target.id === 'callback-form') {
            submitCallback(e);
        }
    });

    // Chat-Modal schlie√üen
    closeButtons.forEach(button => {
        button.addEventListener('click', hideChatModal);
    });

    // Event-Delegation f√ºr R√ºckruf-Modal Buttons
    document.addEventListener('click', (e) => {
        if (e.target.id === 'back-to-slots') {
            showCallbackStep('step-slot-selection');
            selectedCallbackData = null;
            
            document.querySelectorAll('.callback-slot-button').forEach(btn => {
                btn.style.opacity = '1';
                btn.style.borderColor = '#e9ecef';
                btn.style.backgroundColor = 'white';
                btn.disabled = false;
                btn.classList.remove('selected');
            });
        }
    });

    // ===================================================================
    // ZUS√ÑTZLICHER CHAT-FORM OBSERVER
    // ===================================================================
    
    const observeChatForm = new MutationObserver((mutations) => {
        const chatForm = document.getElementById('ai-chat-form');
        const chatInput = document.getElementById('ai-chat-input');
        
        if (chatForm && chatInput && !chatForm.hasAttribute('data-listener-attached')) {
            console.log("üí¨ Chat-Form gefunden, f√ºge Event-Listener hinzu");
            
            chatForm.setAttribute('data-listener-attached', 'true');
            
            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const userInput = chatInput.value.trim();
                if (!userInput) return;
                
                console.log("üí¨ Chat-Submit (Observer) mit Eingabe:", userInput);
                
                addMessageToHistory(userInput, 'user');
                chatInput.value = '';
                
                await sendToEvita(userInput, true);
            });
            
            console.log("‚úÖ Chat-Form Event-Listener via Observer hinzugef√ºgt");
        }
    });
    
    // Starte Observer f√ºr den Modal-Container
    const modalContainer = document.getElementById('ai-response-content-area');
    if (modalContainer) {
        observeChatForm.observe(modalContainer, {
            childList: true,
            subtree: true
        });
    }

    // ===================================================================
    // GLOBALE FUNKTIONEN F√úR EXTERNE NUTZUNG
    // ===================================================================

    window.launchBookingFromAnywhere = launchBookingModal;
    window.debugBookingLaunch = launchBookingModal;
    window.debugCreateFallback = createEmergencyFallbackModal;
    
    window.closeCallbackModal = () => {
        const modal = document.getElementById('booking-modal');
        if (modal) {
            modal.remove();
        }
        document.body.style.overflow = '';
        document.body.classList.remove('no-scroll');
        selectedCallbackData = null;
        console.log("‚úÖ R√ºckruf-Modal geschlossen");
    };
    
    console.log("‚úÖ Korrigierte AI-Form mit intelligenter Booking-Erkennung vollst√§ndig initialisiert");
};
